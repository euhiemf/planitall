// Generated by CoffeeScript 1.7.1
(function() {
  var Plugin, Task, TaskRouter, TaskView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Plugin = app.get('plugin');

  Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      return Task.__super__.constructor.apply(this, arguments);
    }

    Task.prototype.defaults = {
      id: 'task',
      title: 'Tasks',
      navigatable: true,
      submenus: [
        {
          link: 'list',
          title: 'Show a list of tasks'
        }, {
          link: 'new',
          title: 'Create a new'
        }
      ]
    };

    return Task;

  })(Plugin.Blueprint.get('model'));

  TaskView = (function(_super) {
    __extends(TaskView, _super);

    function TaskView() {
      return TaskView.__super__.constructor.apply(this, arguments);
    }

    TaskView.prototype.render = function() {
      return this.$el.html('<h2>Task main</h2>');
    };

    TaskView.prototype.renderList = function() {
      return Plugin.Blueprint.render(this)(function() {
        return this.$el.html('<h2>Task new</h2>');
      });
    };

    TaskView.prototype.renderNew = function() {
      return Plugin.Blueprint.render(this)(function() {
        return this.$el.html("\n<h2>Add a new task</h2>\n\n<form>\n\n	<div class=\"input-box\">\n		<label class='input-title before'>Start from</label>\n		<input class='text' type='text'>\n		<button class='button dateselect after'></button>\n	</div>\n\n	<div class=\"input-box\">\n		<label class='input-title before'>End at</label>\n		<input class='text' type='text'>\n		<button class='button dateselect after'></button>\n	</div>\n\n\n	<div class=\"combo-box\">\n		<label class='input-title before'>Type</label>\n		<input class='text' type='text'>\n		<button class='button dateselect after'></button>\n		<ul class='options'>\n			<li class='option'>Read</li>\n			<li class='option'>Study</li>\n			<li class='option'>Do</li>\n			<li class='separator'></li>\n			<li class='option'>Add more...</li>\n		</ul>\n	</div>\n\n\n</form>\n");
      });
    };

    return TaskView;

  })(Plugin.Blueprint.get('view'));

  TaskRouter = (function(_super) {
    __extends(TaskRouter, _super);

    function TaskRouter() {
      return TaskRouter.__super__.constructor.apply(this, arguments);
    }

    TaskRouter.prototype.routes = {
      'list': 'render-list',
      'new': 'render-new'
    };

    TaskRouter.prototype['render-list'] = function() {
      return Plugin.get('task').view.renderList();
    };

    TaskRouter.prototype['render-new'] = function() {
      return Plugin.get('task').view.renderNew();
    };

    return TaskRouter;

  })(Plugin.Blueprint.get('router'));

  Plugin["new"](Task).view(TaskView).router(TaskRouter);

}).call(this);
