// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'jquery'], function(Backbone, jQuery) {
    var Clearer;
    Clearer = (function(_super) {
      __extends(Clearer, _super);

      function Clearer() {
        return Clearer.__super__.constructor.apply(this, arguments);
      }

      Clearer.prototype.toclear = [];

      Clearer.prototype.toflush = [];

      Clearer.prototype.clear = function(domain) {
        var index, ob, _i, _len, _ref;
        _ref = _.clone(this.toclear);
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          ob = _ref[index];
          if (domain === ob.domain) {
            continue;
          }
          switch (typeof ob.what) {
            case 'object':
              this.cleanseObject(ob.action, ob.what);
              break;
            default:
              ob.what = null;
          }
          this.toflush.push(index);
        }
        return this.flush();
      };

      Clearer.prototype.add = function(action, what, domain) {
        return this.toclear.push({
          action: action,
          what: what,
          domain: domain
        });
      };

      Clearer.prototype.cleanseObject = function(action, object) {
        var type;
        type = 'object';
        if (object instanceof jQuery) {
          type = 'jquery';
        }
        if (object instanceof HTMLElement) {
          type = 'html';
        }
        if (object.hasOwnProperty('key' && object.hasOwnProperty('base'))) {
          type = 'keybase';
        }
        if (object === null) {
          type = 'null';
        }
        switch (type) {
          case 'jquery':
            return this.cleaseJquery(arguments);
          case 'html':
            return this.cleanseHTML(arguments);
          case 'keybase':
            return this.cleaseKeyBase(arguments);
        }
      };

      Clearer.prototype.cleaseJquery = function(action, object) {
        switch (action) {
          case 'remove':
            return object.remove();
          case 'clear':
            return object.empty();
        }
      };

      Clearer.prototype.cleanseHTML = function(action, object) {
        switch (action) {
          case 'remove':
            return jQuery(object).remove();
          case 'empty':
            return jQuery(object).empty();
        }
      };

      Clearer.prototype.cleaseKeyBase = function(action, object) {
        switch (action) {
          case 'delete':
            return delete base[key];
          case 'remove':
            return delete base[key];
        }
      };

      Clearer.prototype.flush = function() {
        var clear_index, flush_index, ol_clrinx, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this.toflush;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          clear_index = _ref[_i];
          this.toclear.splice(clear_index, 1);
          _ref1 = this.toflush;
          for (flush_index = _j = 0, _len1 = _ref1.length; _j < _len1; flush_index = ++_j) {
            ol_clrinx = _ref1[flush_index];
            this.toflush[flush_index] = ol_clrinx - 1;
          }
        }
        return this.toflush = [];
      };

      return Clearer;

    })(Backbone.Model);
    return new Clearer;
  });

}).call(this);
